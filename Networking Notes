Networking CTF : http://10.50.20.180:8000

7 - Application / Data / DNS, HTTP, TELNET 
6 - Presentation / Data / SSL, TLS, JPEG, GIF
5 - Session / Data / NetBIOS, PPTP, RPC, NFS
4 - Transport / Segment/Datagram /  TCP, UDP
3 - Network / Packet / IP, ICMP, IGMP
2 - Data Link / Frames / PPP, ATM, 802.2/3 Ethernet, Frame Relay
1 - Physical / Bits /Bluetooth, USB, 802.11 (Wi-Fi), DSL, 1000Base-T
IANA
IEEE


Dec 	Hex 	Dec 	Hex 	Dec 	Hex 	Dec 	Hex 	Dec 	Hex 	Dec 	Hex 	Dec 	Hex 	Dec 	Hex
0 	00 	32 	20 	64 	40 	96 	60 	128 	80 	160 	A0 	192 	C0 	224 	E0
1 	01 	33 	21 	65 	41 	97 	61 	129 	81 	161 	A1 	193 	C1 	225 	E1
2 	02 	34 	22 	66 	42 	98 	62 	130 	82 	162 	A2 	194 	C2 	226 	E2
3 	03 	35 	23 	67 	43 	99 	63 	131 	83 	163 	A3 	195 	C3 	227 	E3
4 	04 	36 	24 	68 	44 	100 	64 	132 	84 	164 	A4 	196 	C4 	228 	E4
5 	05 	37 	25 	69 	45 	101 	65 	133 	85 	165 	A5 	197 	C5 	229 	E5
6 	06 	38 	26 	70 	46 	102 	66 	134 	86 	166 	A6 	198 	C6 	230 	E6
7 	07 	39 	27 	71 	47 	103 	67 	135 	87 	167 	A7 	199 	C7 	231 	E7
8 	08 	40 	28 	72 	48 	104 	68 	136 	88 	168 	A8 	200 	C8 	232 	E8
9 	09 	41 	29 	73 	49 	105 	69 	137 	89 	169 	A9 	201 	C9 	233 	E9
10 	0A 	42 	2A 	74 	4A 	106 	6A 	138 	8A 	170 	AA 	202 	CA 	234 	EA
11 	0B 	43 	2B 	75 	4B 	107 	6B 	139 	8B 	171 	AB 	203 	CB 	235 	EB
12 	0C 	44 	2C 	76 	4C 	108 	6C 	140 	8C 	172 	AC 	204 	CC 	236 	EC
13 	0D 	45 	2D 	77 	4D 	109 	6D 	141 	8D 	173 	AD 	205 	CD 	237 	ED
14 	0E 	46 	2E 	78 	4E 	110 	6E 	142 	8E 	174 	AE 	206 	CE 	238 	EE
15 	0F 	47 	2F 	79 	4F 	111 	6F 	143 	8F 	175 	AF 	207 	CF 	239 	EF
16 	10 	48 	30 	80 	50 	112 	70 	144 	90 	176 	B0 	208 	D0 	240 	F0
17 	11 	49 	31 	81 	51 	113 	71 	145 	91 	177 	B1 	209 	D1 	241 	F1
18 	12 	50 	32 	82 	52 	114 	72 	146 	92 	178 	B2 	210 	D2 	242 	F2
19 	13 	51 	33 	83 	53 	115 	73 	147 	93 	179 	B3 	211 	D3 	243 	F3
20 	14 	52 	34 	84 	54 	116 	74 	148 	94 	180 	B4 	212 	D4 	244 	F4
21 	15 	53 	35 	85 	55 	117 	75 	149 	95 	181 	B5 	213 	D5 	245 	F5
22 	16 	54 	36 	86 	56 	118 	76 	150 	96 	182 	B6 	214 	D6 	246 	F6
23 	17 	55 	37 	87 	57 	119 	77 	151 	97 	183 	B7 	215 	D7 	247 	F7
24 	18 	56 	38 	88 	58 	120 	78 	152 	98 	184 	B8 	216 	D8 	248 	F8
25 	19 	57 	39 	89 	59 	121 	79 	153 	99 	185 	B9 	217 	D9 	249 	F9
26 	1A 	58 	3A 	90 	5A 	122 	7A 	154 	9A 	186 	BA 	218 	DA 	250 	FA
27 	1B 	59 	3B 	91 	5B 	123 	7B 	155 	9B 	187 	BB 	219 	DB 	251 	FB
28 	1C 	60 	3C 	92 	5C 	124 	7C 	156 	9C 	188 	BC 	220 	DC 	252 	FC
29 	1D 	61 	3D 	93 	5D 	125 	7D 	157 	9D 	188 	BD 	221 	DD 	253 	FD
30 	1E 	62 	3E 	94 	5E 	126 	7E 	158 	9E 	190 	BE 	222 	DE 	254 	FE
31 	1F 	63 	3F 	95 	5F 	127 	7F 	159 	9F 	191 	BF 	223 	DF 	255 	FF



RAW SOCKETS ARE IN KERNEL SPACE
import {module}
from {module} import *
xxd -r file-encoded.txt file-decoded.txt
message = b'Message'
hidden_msg = binascii.hexlify(message)


pingsweep
for i in {1..254}; do (ping -c 1 172.16.82.$i | grep "bytes from" &) ; done

pingsweep specific
for i in {1..254}; do nc -nvzw1 172.16.82.$i 20-23 80 2>&1 & done | grep -E 'succ|open'
pingsweep UDP
for i in {1..254}; do nc -nuvzw1 172.16.82.$i 1000-2000 2>&1 & done | grep -E 'succ|open'

netcat scanning
nc [Target IP] [Target Port]
nc 172.16.82.106 22
nc -u 172.16.82.106 53

wget -r http://172.16.82.106
wget -r ftp://172.16.82.106

curl http://172.16.82.106
curl ftp://172.16.82.106

PASSIVE INTERNAL
Windows : ipconfig /all
Linux : ip address
Vyos Show interface

Windows: ipconfig /displaydns
Linux: cat /etc/resolv.conf

Windows: arp -a
Linux: ip neighbor (arp -a depreciated)

Windows: netstat
Linux: ss
Example options useful for both netstat and ss: -antp
a = Displays all active connections and ports.
n = No determination of protocol names. Shows 22 not SSH.
t = Display only TCP connections.
u = Display only UDP connections.
p = Shows which processes are using which sockets.

Windows: %SystemRoot%\system32\drivers\etc\services
Linux/Unix: /etc/services
Windows: systeminfo
Linux: uname -a and /etc/os-release
Windows: tasklist
Linux: ps or top
which
whereis
Windows: route print
Linux: ip route
VyOS: show ip route
find / -iname hint* 2> /dev/null
find / -iname flag* 2> /dev/null
Windows: C:\Windows\System32\OpenSSH\sshd_config
Linux: /etc/ssh/sshd_config


ping -c 1 172.16.82.106

for i in {1..254}; do (ping -c 1 172.16.82.$i | grep "bytes from" &) ; done

sudo nmap -sP 172.16.82.96/27

for mapping 
    Device type (Router/host)
    System Host-names
    Interface names (eth0, eth1, etc)
    IP address and CIDRs for all interfaces
    TCP and UDP ports
    MAC Address
    OS type/version
    Known credentials

Networking Methodology 
*Host Discovery:
  Ruby ping sweep if avaialabe
  Nmap scan if no ping
*Port Discovery
  nmap
  nc scan script
*Port Validation
  banner grabbing using nc [ip] [port]
*Follow on actions based on ports
  if 21 or 80 wget -r [ip] or wget -r ftp://{IP ADDR]
  if 22 or 23 connect and passive recon
  if no 22 or 23 and you need to get on the box and you have port 21 
  FTP [IP ADDR]
    Passive
    ls
    get [file name]

Scan Methodology 
  nmap -Pn [IP addr] -T4 -p 21-23,80

  quick scan port 21-23,80
  specific ports based on hints and clues
  well known port range
scab all ports hail mary
SHOW IP route
ip route
find / -iname flag*
find / -iname hint*
ss -ntlp
which tcpdump wireshark nmap telnet get curl ping
sudo which


passive recon methodology 
hostname
sudo -l
ip a 
show interface


Entry Float IP: 10.50.37.85

    Your Network Number is 2 (Given by Instructor)

    Credentials: net2_studentX:passwordX

    X 

SCP: Source file comes first 
Download FIle from remote to local/ scp student@172.16.82.106:secretstuff.txt /home/student

Upload file to remote from local/ scp secretstuff.txt student@172.16.82.106:/home/student

copy file from remote host to sepereate remote host/ scp -3 student@172.16.82.106:/home/student/secretstuff.txt student@172.16.82.112:/home/student


create local port forward: ssh student@172.16.82.106 -L 1111:localhost:22 -NT

download from tunnel: scp -P 1111 student@localhost:secretstuff.txt /home/student

upload through tunnel : scp -P 1111 secretstuff.txt student@localhost:/home/student


nc -lvp 9001 > newfile.txt / recieve file 
nc 172.16.82.106 9001 < file.txt / send file

if no netcat 
reciveing box: nc -lvp 1111 > devtcpfile.txt
sending box: cat secret.txt > /dev/tcp/10.10.0.40/1111

encode: echo "Hex encoding test" | xxd -p
48657820656e636f64696e6720746573740a
reverse: echo "48657820656e636f64696e6720746573740a" | xxd -r -p
Hex encoding test


base64 -w0 logoCyber.png
^^^^^
base64 -d b64image.png > logoCyber.png





TUNNELLING NOTES:::::::::::::::::::::::::::::::::::::::::::







